{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","images/background_photo_3.jpg","components/NavbarCom.js","components/ProjectInfo.js","components/Team.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","mintNFT","url","name","description","trim","metadata","Object","image","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setURL","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","value","NavbarCom","Navbar","expand","bg","variant","Container","Brand","Toggle","Collapse","Nav","Link","NavDropdown","title","Item","Divider","eventKey","Component","ProjectInfo","Team","Home","src","imgBackground","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+wKAAAA,EAAQ,KAAUC,SAClB,IAGMC,EAAQF,EAAQ,KAETG,EAAa,iDAAG,WAAMC,GAAN,oJAGlBF,EACFG,KAJoB,iDAIVD,EAAU,CACjBE,QAAS,CACLC,eAXJC,uBAYIC,sBAXDD,sEAcNE,MAAK,SAAUC,GACb,MAAO,CACHC,SAAS,EACTC,UAAW,qCAAuCF,EAASG,KAAKC,aAGtEC,OAAM,SAAUC,GAEb,OADAC,QAAQC,IAAIF,GACL,CACHL,SAAS,EACTQ,QAASH,EAAMG,aApBF,2CAAH,sD,OCH1BpB,EAAQ,KAAUC,SAClB,IAEMoB,GAAOC,EADiBtB,EAAQ,KAA9BsB,mBADWd,+DAIbe,EAAcvB,EAAQ,KACtBwB,EAAkB,6CAGXC,EAAa,iDAAG,oGACrBC,OAAOC,SADc,0CAGMD,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,wBAJW,cAGfC,EAHe,OAMfC,EAAM,CACVC,OAAQ,oEACRC,QAASH,EAAa,IARH,kBAUdC,GAVc,yDAYd,CACLE,QAAS,GACTD,OAAQ,gBAAQ,KAAIZ,UAdD,yDAkBhB,CACLa,QAAS,GACTD,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGE,OAAO,SAASC,KAAI,oCAAvB,2FAzBe,yDAAH,qDAoCXC,EAAyB,iDAAG,kGACnCV,OAAOC,SAD4B,0CAGRD,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,iBAJyB,aAG7BC,EAH6B,QAMlBO,OAAS,GANS,yCAO1B,CACLJ,QAASH,EAAa,GACtBE,OAAQ,sEATuB,gCAY1B,CACLC,QAAS,GACTD,OAAQ,iEAduB,mFAkB5B,CACLC,QAAS,GACTD,OAAQ,gBAAQ,KAAIZ,UApBa,yDAwB9B,CACLa,QAAS,GACTD,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGE,OAAO,SAASC,KAAI,oCAAvB,2FA/B6B,0DAAH,qDA2CzBG,EAAO,iDAAG,WAAMC,EAAKC,EAAMC,GAAjB,4FAGH,IAAdF,EAAIG,QAAgC,IAAfF,EAAKE,QAAsC,IAAtBD,EAAYC,OAHrC,yCAIV,CACH9B,SAAS,EACToB,OAAQ,oEANK,cAWfW,EAAW,IAAIC,QACZJ,KAAOA,EAChBG,EAASE,MAAQN,EACjBI,EAASF,YAAcA,EAdF,SAiBQtC,EAAcwC,GAjBtB,WAiBfG,EAjBe,QAkBDlC,QAlBC,0CAmBV,CACHA,SAAS,EACToB,OAAQ,qEArBK,eAwBfe,EAAWD,EAAejC,UAxBX,UA2BG,IAAIQ,EAAK2B,IAAIC,SAAS1B,EAAaC,GA3BtC,eA2BrBE,OAAOwB,SA3Bc,OA8BfC,EAAwB,CAC1BC,GAAI5B,EACJ6B,KAAM3B,OAAOC,SAAS2B,gBACtB,KAAQ5B,OAAOwB,SAASK,QAAQjB,QAAQZ,OAAOC,SAAS2B,gBAAiBP,GAAUS,aAjClE,oBAsCI9B,OAAOC,SACvBC,QAAQ,CACLC,OAAQ,sBACR4B,OAAQ,CAACN,KAzCA,eAsCXO,EAtCW,yBA2CV,CACH9C,SAAS,EACToB,OAAQ,iFAA8E0B,IA7CzE,4DAgDV,CACH9C,SAAS,EACToB,OAAQ,sCAA8B,KAAMZ,UAlD/B,2DAAH,0DC0BPuC,EA3GA,SAACC,GAGd,MAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA4BF,mBAAS,IAArC,mBAAO7B,EAAP,KAAegC,EAAf,KACA,EAAwBH,mBAAS,IAAjC,mBAAOrB,EAAP,KAAayB,EAAb,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOpB,EAAP,KAAoByB,EAApB,KACA,EAAsBL,mBAAS,IAA/B,mBAAOtB,EAAP,KAAY4B,EAAZ,KASF,SAASC,IACH1C,OAAOC,SACTD,OAAOC,SAAS0C,GAAG,mBAAmB,SAACC,GACjCA,EAASjC,OAAS,GACpB0B,EAAUO,EAAS,IACnBN,EAAU,uEAEVD,EAAU,IACVC,EAAU,oEAIdA,EACE,8BACG,IADH,eAEK,IACH,mBAAG9B,OAAO,SAASC,KAAI,oCAAvB,wFAvBNoC,oBAAS,gCAAC,kHACwBnC,IADxB,gBACDH,EADC,EACDA,QAASD,EADR,EACQA,OAChB+B,EAAU9B,GACV+B,EAAUhC,GAEVoC,IALQ,2CAMT,IA2BD,IAAMI,EAAoB,iDAAG,8GACC/C,IADD,OACtBgD,EADsB,OAEzBT,EAAUS,EAAezC,QACzB+B,EAAUU,EAAexC,SAHA,2CAAH,qDAOpByC,EAAa,iDAAG,gHACKpC,EAAQC,EAAKC,EAAMC,GADxB,gBACZT,EADY,EACZA,OACRgC,EAAUhC,GAFU,2CAAH,qDAKnB,OACA,sBAAK2C,UAAU,SAAf,UAII,wBAAQC,GAAG,eAAeC,QAASL,EAAnC,SACGV,EAAczB,OAAS,EACtB,cACAyC,OAAOhB,GAAeiB,UAAU,EAAG,GACnC,MACAD,OAAOhB,GAAeiB,UAAU,IAEhC,oDAIJ,uBACA,oBAAIH,GAAG,QAAP,wBACA,8EAGA,iCACE,+CACA,uBACEI,KAAK,OACLC,YAAY,wCACZC,SAAU,SAACC,GAAD,OAAWhB,EAAOgB,EAAMjD,OAAOkD,UAE3C,kDACA,uBACEJ,KAAK,OACLC,YAAY,eACZC,SAAU,SAACC,GAAD,OAAWlB,EAAQkB,EAAMjD,OAAOkD,UAE5C,sDACA,uBACEJ,KAAK,OACLC,YAAY,oBACZC,SAAU,SAACC,GAAD,OAAWjB,EAAeiB,EAAMjD,OAAOkD,aAGrD,wBAAQR,GAAG,aAAaC,QAASH,EAAjC,sBAGA,mBAAGE,GAAG,SAAN,SACG5C,Q,2EC7GM,MAA0B,+CCWlCqD,E,4JACL,WACE,OACE,qBAAKV,UAAY,SAAjB,SACA,cAACW,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,UAAUC,QAAQ,OAAzC,SAEJ,eAACC,EAAA,EAAD,WACA,cAACJ,EAAA,EAAOK,MAAR,CAAcxD,KAAK,QAAnB,oBACA,cAACmD,EAAA,EAAOM,OAAR,CAAe,gBAAc,0BAC7B,eAACN,EAAA,EAAOO,SAAR,CAAiBjB,GAAG,wBAApB,UACE,eAACkB,EAAA,EAAD,CAAKnB,UAAU,UAAf,UACE,cAACmB,EAAA,EAAIC,KAAL,CAAU5D,KAAK,WAAf,sBACA,cAAC2D,EAAA,EAAIC,KAAL,CAAU5D,KAAK,UAAf,sBACA,eAAC6D,EAAA,EAAD,CAAaC,MAAM,aAAarB,GAAG,0BAAnC,UACE,cAACoB,EAAA,EAAYE,KAAb,CAAkB/D,KAAK,eAAvB,0BACA,cAAC6D,EAAA,EAAYE,KAAb,CAAkB/D,KAAK,eAAvB,0BAEA,cAAC6D,EAAA,EAAYG,QAAb,IACA,cAACH,EAAA,EAAYE,KAAb,CAAkB/D,KAAK,UAAvB,6BAIJ,eAAC2D,EAAA,EAAD,WACE,cAACA,EAAA,EAAIC,KAAL,CAAU5D,KAAK,QAAf,kBACA,cAAC2D,EAAA,EAAIC,KAAL,CAAUK,SAAU,EAAGjE,KAAK,sBAA5B,yC,GAxBmBkE,aAuCThB,I,iBC9CKiB,E,4JACnB,WACE,OACE,sBAAK3B,UAAW,UAAhB,UACI,yCAGA,+CACA,8c,GAR+B0B,aCDpBE,G,mKACnB,WACE,OACE,sBAAK5B,UAAW,OAAhB,UACI,oBAAIA,UAAY,YAAhB,uBAEA,mBAAGA,UAAW,WAAd,8G,GANwB0B,cCI3BG,E,4JACL,WACE,OAEG,8BACP,sBAAK7B,UAAU,SAAf,UAEO,qBAAK8B,IAAKC,IAFjB,a,GALoBL,aAiBLG,ICmBAG,MAhCf,WACE,OACE,cAAC,IAAD,UAEA,sBAAKhC,UAAU,MAAf,UAEE,cAAC,EAAD,IAEA,qBAAKA,UAAU,UAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiC,KAAM,QAAb,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,WAAZ,SACG,cAAC,EAAD,MAEH,cAAC,IAAD,CAAOA,KAAM,UAAb,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,iBCnBGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrG,MAAK,YAAkD,IAA/CsG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.667f1a95.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios \r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};\r\n","import {pinJSONToIPFS} from './pinata.js'\r\n\r\n\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xbfFeB6586E6E3a6Ac95C60108286553700BAE3bC\";\r\n\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n  export const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n\r\n  export const mintNFT = async(url, name, description) => {\r\n\r\n    //error handling\r\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n        return {\r\n            success: false,\r\n            status: \"❗Please make sure all fields are completed before minting.\",\r\n        }\r\n    }\r\n\r\n    //make metadata\r\n    const metadata = new Object();\r\n    metadata.name = name;\r\n    metadata.image = url;\r\n    metadata.description = description;\r\n\r\n    //pinata pin request\r\n    const pinataResponse = await pinJSONToIPFS(metadata);\r\n    if (!pinataResponse.success) {\r\n        return {\r\n            success: false,\r\n            status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n        }\r\n    }\r\n    const tokenURI = pinataResponse.pinataUrl;\r\n\r\n    //load smart contract\r\n    window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n\r\n    //set up your Ethereum transaction\r\n    const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract\r\n    };\r\n\r\n    //sign transaction via Metamask\r\n    try {\r\n        const txHash = await window.ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [transactionParameters],\r\n            });\r\n        return {\r\n            success: true,\r\n            status: \"✅ Check out your transaction on Etherscan: https://kovan.etherscan.io/tx/\" + txHash\r\n        }\r\n    } catch (error) {\r\n        return {\r\n            success: false,\r\n            status: \"😥 Something went wrong: \" + error.message\r\n        }\r\n    }\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { connectWallet, getCurrentWalletConnected //import here\r\n} from \"./utils/interact.js\";\r\nimport {  mintNFT } from \"./utils/interact.js\";\r\n//import { Box, Button, Flex, Image, Link, Spacer } from \"@chakra-ui/react\";\r\n//import Facebook from \"./images/facebook_icon.png\";\r\n//import Twitter from \"./images/twitter_icon.png\";\r\n//import Linkedln from \"./images/linkedln.png\";\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n \r\n  useEffect(async () => {\r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n}, []);\r\nfunction addWalletListener() {\r\n  if (window.ethereum) {\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      if (accounts.length > 0) {\r\n        setWallet(accounts[0]);\r\n        setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n      } else {\r\n        setWallet(\"\");\r\n        setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n      }\r\n    });\r\n  } else {\r\n    setStatus(\r\n      <p>\r\n        {\" \"}\r\n        🦊{\" \"}\r\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n          You must install Metamask, a virtual Ethereum wallet, in your\r\n          browser.\r\n        </a>\r\n      </p>\r\n    );\r\n  }\r\n}\r\n  \r\n\r\n  const connectWalletPressed = async () => { //TODO: implement\r\n   const walletResponse = await connectWallet();\r\n      setStatus(walletResponse.status);\r\n      setWallet(walletResponse.address);\r\n    \r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n};\r\n\r\n  return (\r\n  <div className=\"Minter\">\r\n\r\n      \r\n\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">NFT Minter</h1>\r\n      <p>\r\n        Follow the step below, you can mint your NFT.\r\n      </p>\r\n      <form>\r\n        <h2> Input link: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"https://gateway.pinata.cloud/ipfs/...\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2> Name your NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My bike\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2> Describe your NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Wow so cool!\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n   </div>\r\n    \r\n  );\r\n  \r\n};\r\n\r\nexport default Minter;\r\n\r\n","export default __webpack_public_path__ + \"static/media/background_photo_3.e0800410.jpg\";","import React, { Component } from 'react';\r\nimport { Navbar,Nav,NavDropdown,Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport imgBackground from '../images/background_photo_3.jpg'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n class NavbarCom extends Component {\r\n  render() {\r\n    return (\r\n      <div className = \"Navbar\">\r\n      <Navbar expand=\"lg\" bg=\"primary\" variant=\"dark\">\r\n\r\n  <Container>\r\n  <Navbar.Brand href=\"/home\">Cyclin</Navbar.Brand>\r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"me-auto\">\r\n      <Nav.Link href=\"/project\">Projects</Nav.Link>\r\n      <Nav.Link href=\"/Minter\">Mint NFT</Nav.Link>\r\n      <NavDropdown title=\"NFT market\" id=\"collasible-nav-dropdown\">\r\n        <NavDropdown.Item href=\"/Collection1\">Collection 1</NavDropdown.Item>\r\n        <NavDropdown.Item href=\"/Collection2\">Collection 2</NavDropdown.Item>\r\n        \r\n        <NavDropdown.Divider />\r\n        <NavDropdown.Item href=\"/Minter\"> Mint NFT</NavDropdown.Item>\r\n        \r\n      </NavDropdown>\r\n    </Nav>\r\n    <Nav>\r\n      <Nav.Link href=\"/team\">Team</Nav.Link>\r\n      <Nav.Link eventKey={2} href=\"https://github.com/\">\r\n        Contact us\r\n      </Nav.Link>\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n  </Container>\r\n</Navbar>    \r\n           \r\n       \r\n           \r\n           </div>\r\n    )\r\n  }\r\n}\r\n\r\n export default NavbarCom; ","\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class ProjectInfo extends Component {\r\n  render() {\r\n    return (\r\n      <div className =\"project\">\r\n          <h2>Project</h2>\r\n          \r\n       \r\n          <h3> Our ambition</h3>\r\n          <p> Our project includes three ambitious peoples: two back-end developers and one front-end.\r\n            With our ambition, We want to build a place for all bikers in the world to follow their \r\n            ambitions and create a community for them. To do so, we are building an NFT collections and afterward \r\n            a market place where bikers can mint, trade their NFT collections. After,we can operate the competititions \r\n            between bikers all over the world. </p>\r\n          \r\n          </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Team.css'; \r\n\r\nexport default class Team extends Component {\r\n  render() {\r\n    return (\r\n      <div className =\"team\">\r\n          <h2 className = \"h2Aboutus\"> About us</h2>\r\n         \r\n          <p className =\"pAboutus\"> Our project includes three ambitious peoples: two back-end developers and one front-end.\r\n            \r\n     </p>\r\n          </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Navbar,Nav,NavDropdown,Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport imgBackground from '../images/background_photo_3.jpg';\r\n\r\n\r\n\r\n class Home extends Component {\r\n  render() {\r\n    return (\r\n      \r\n       <div>     \r\n<div className=\"imgbgr\">\r\n\r\n       <img src={imgBackground} /> </div>       \r\n           \r\n          \r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home; ","import './App.css';\r\nimport Minter from './Minter'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport NavbarCom from './components/NavbarCom';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'; \r\nimport ProjectInfo from './components/ProjectInfo';\r\nimport Team from './components/Team';\r\nimport Home from './components/Home'; \r\nimport './index.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router> \r\n      \r\n    <div className=\"App\">\r\n       \r\n      <NavbarCom />\r\n      \r\n      <div className=\"content\">\r\n        <Switch>\r\n          <Route path =\"/home\">\r\n            <Home />\r\n             </Route>\r\n          <Route path=\"/project\">\r\n             <ProjectInfo />\r\n          </Route>\r\n          <Route path =\"/Minter\">\r\n            <Minter></Minter>\r\n          </Route>\r\n          <Route path=\"/team\">\r\n            <Team />\r\n          </Route>\r\n        </Switch>\r\n        \r\n      \r\n      </div>\r\n    </div>\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}